{"version":3,"sources":["../../src/utils/KeyEnum.ts","../../src/components/help/Input.tsx","../../src/components/help/Suggestion.tsx","../../src/utils/index.ts","../../src/components/index.tsx","App.tsx","index.tsx"],"names":["KeyEnum","Input","React","TextField","props","Suggestion","needle","shouldRenderSuggestion","value","textFieldProps","isFocused","style","position","top","left","right","bottom","opacity","zIndex","filterSuggestions","suggestions","ignoreCase","getSuggestionValue","rx","RegExp","filter","test","suggestion","String","InlineSuggest","text","matchedSuggestions","onInputChange","onInputBlur","navigate","onMatch","useState","activeIndex","setActiveIndex","setValue","setIsFocused","handleFocus","useCallback","handleOnBlur","target","fireOnChange","newValue","handleOnChange","e","valueFromEvent","currentTarget","newMatchedArray","Boolean","length","getMatchedSuggestions","handleOnKeyDown","event","current","key","allowedKeyCodes","includes","preventDefault","DOWN_ARROW","UP_ARROW","array","handleOnKeyUp","TAB","ENTER","RIGHT_ARROW","matchedValue","onChange","onBlur","onKeyUp","onKeyDown","onFocus","replace","substr","App","height","width","display","justifyContent","alignItems","label","variant","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d12a7c4e.chunk.js","sourcesContent":["export enum KeyEnum {\n  TAB = 'Tab',\n  ENTER = 'Enter',\n  RIGHT_ARROW = 'ArrowRight',\n  DOWN_ARROW = 'ArrowDown',\n  UP_ARROW = 'ArrowUp'\n}\n","import React, { FC } from 'react'\nimport TextField, { TextFieldProps } from '@material-ui/core/TextField'\n\nconst Input: FC<TextFieldProps> = props => <TextField {...props} />\n\nexport default Input\n","import React, { FC } from 'react'\nimport TextField, { TextFieldProps } from '@material-ui/core/TextField'\n\nimport { ShouldRenderSuggestionFn } from '../../utils/types'\n\nconst Suggestion: FC<SuggestionProps> = ({ needle, shouldRenderSuggestion, value, textFieldProps, isFocused }) => {\n  if (shouldRenderSuggestion && value && !shouldRenderSuggestion(value)) {\n    return null\n  }\n  return (\n    <TextField\n      {...textFieldProps}\n      style={{\n        position: 'absolute',\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        opacity: '0.4',\n        zIndex: -1\n      }}\n      value={value === '' && isFocused ? ' ' : value + needle}\n    />\n  )\n}\n\nexport interface SuggestionProps {\n  value?: string\n  needle: string\n  shouldRenderSuggestion?: ShouldRenderSuggestionFn\n  textFieldProps?: TextFieldProps\n  isFocused: boolean\n}\n\nexport default Suggestion\n","import { GetSuggestionValueFn } from './types'\n\nexport function filterSuggestions<T>(\n  value: string,\n  suggestions: T[],\n  ignoreCase: boolean,\n  getSuggestionValue?: GetSuggestionValueFn<T>\n) {\n  if (!value) {\n    return []\n  }\n\n  const rx = RegExp(`^${value}`, ignoreCase ? 'i' : undefined)\n  return suggestions.filter(suggestion =>\n    getSuggestionValue ? rx.test(getSuggestionValue(suggestion)) : rx.test(String(suggestion))\n  )\n}\n\nexport function getNeedleFromString(text: string, current: string) {\n  return text.replace(text.substr(0, current.length), '')\n}\n\nexport function getNextSafeIndexFromArray<T>(array: T[], current: number) {\n  return current + 1 > array.length - 1 ? 0 : current + 1\n}\n\nexport function getPreviousSafeIndexFromArray<T>(array: T[], current: number) {\n  return current - 1 < 0 ? array.length - 1 : current - 1\n}\n\nexport * from './KeyEnum'\nexport * from './types'\n","import React, { useState, useCallback, KeyboardEvent, ChangeEvent } from 'react'\nimport { TextFieldProps } from '@material-ui/core'\n\nimport Input from './help/Input'\nimport Suggestion from './help/Suggestion'\n\nimport { ShouldRenderSuggestionFn, GetSuggestionValueFn } from '../utils/types'\nimport {\n  filterSuggestions,\n  getNeedleFromString,\n  getNextSafeIndexFromArray,\n  getPreviousSafeIndexFromArray,\n  KeyEnum\n} from '../utils'\n\nexport const InlineSuggest = function <T>({\n  getSuggestionValue,\n  suggestions,\n  ignoreCase,\n  onInputChange,\n  onInputBlur,\n  navigate,\n  shouldRenderSuggestion,\n  onMatch,\n  textFieldProps\n}: Props<T>) {\n  const [activeIndex, setActiveIndex] = useState(-1)\n  const [value, setValue] = useState('')\n  const [isFocused, setIsFocused] = useState(false)\n\n  const handleFocus = useCallback(() => {\n    setIsFocused(true)\n  }, [])\n\n  const handleOnBlur: TextFieldProps['onBlur'] = useCallback(\n    ({ target: { value } }) => {\n      onInputBlur && onInputBlur(value)\n      setIsFocused(false)\n    },\n    [onInputBlur]\n  )\n\n  const fireOnChange = useCallback(\n    (newValue: string) => {\n      onInputChange && onInputChange(newValue)\n    },\n    [onInputChange]\n  )\n\n  const handleOnChange = useCallback(\n    (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n      const valueFromEvent = e.currentTarget.value\n\n      const newMatchedArray = filterSuggestions(valueFromEvent, suggestions, Boolean(ignoreCase), getSuggestionValue)\n\n      setActiveIndex(newMatchedArray.length > 0 ? 0 : -1)\n      setValue(valueFromEvent)\n      fireOnChange(valueFromEvent)\n    },\n    [fireOnChange, getSuggestionValue, ignoreCase, suggestions]\n  )\n\n  const getMatchedSuggestions = useCallback(() => {\n    return filterSuggestions(value, suggestions, Boolean(ignoreCase), getSuggestionValue) as T[]\n  }, [value, suggestions, ignoreCase, getSuggestionValue])\n\n  const handleOnKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      const { key } = event\n      if (activeIndex === -1) return\n\n      if (allowedKeyCodes.includes(key as KeyEnum)) event.preventDefault()\n\n      if (navigate && (key === KeyEnum.DOWN_ARROW || key === KeyEnum.UP_ARROW)) {\n        const matchedSuggestions = getMatchedSuggestions()\n        setActiveIndex(\n          key === KeyEnum.DOWN_ARROW\n            ? getNextSafeIndexFromArray(matchedSuggestions, activeIndex)\n            : getPreviousSafeIndexFromArray(matchedSuggestions, activeIndex)\n        )\n      }\n    },\n    [navigate, getMatchedSuggestions, activeIndex]\n  )\n\n  const handleOnKeyUp = useCallback(\n    ({ key }: KeyboardEvent<HTMLDivElement>) => {\n      if (activeIndex >= 0 && (key === KeyEnum.TAB || key === KeyEnum.ENTER || key === KeyEnum.RIGHT_ARROW)) {\n        const matchedSuggestions = getMatchedSuggestions()\n        const matchedValue = matchedSuggestions[activeIndex]\n\n        const newValue = getSuggestionValue ? getSuggestionValue(matchedValue) : String(matchedValue)\n\n        setValue(newValue)\n\n        fireOnChange(newValue)\n\n        onMatch && onMatch(matchedValue)\n      }\n    },\n    [activeIndex, fireOnChange, getMatchedSuggestions, getSuggestionValue, onMatch]\n  )\n\n  const getNeedle = () => {\n    const matchedSuggestions = getMatchedSuggestions()\n\n    if (!matchedSuggestions[activeIndex]) return ''\n\n    return getNeedleFromString(\n      getSuggestionValue\n        ? getSuggestionValue(matchedSuggestions[activeIndex])\n        : String(matchedSuggestions[activeIndex]),\n      value\n    )\n  }\n\n  return (\n    <span style={{ position: 'relative' }}>\n      <Input\n        {...textFieldProps}\n        value={value}\n        onChange={handleOnChange}\n        onBlur={handleOnBlur}\n        onKeyUp={handleOnKeyUp}\n        onKeyDown={handleOnKeyDown}\n        onFocus={handleFocus}\n      />\n      <Suggestion\n        isFocused={isFocused}\n        value={value}\n        needle={getNeedle()}\n        shouldRenderSuggestion={shouldRenderSuggestion}\n        textFieldProps={textFieldProps}\n      />\n    </span>\n  )\n}\n\nconst allowedKeyCodes = [KeyEnum.TAB, KeyEnum.UP_ARROW, KeyEnum.DOWN_ARROW]\n\nexport interface Props<T = string> {\n  className?: string\n  getSuggestionValue?: GetSuggestionValueFn<T>\n  ignoreCase?: boolean\n  inputValue?: string\n  navigate?: boolean\n  shouldRenderSuggestion?: ShouldRenderSuggestionFn\n  suggestions: T[]\n  onInputBlur?(value: string): void\n  onInputChange?(newValue: string): void\n  onMatch?(matchedValue: T): void\n  textFieldProps?: TextFieldProps\n}\n","import React from 'react'\nimport { InlineSuggest } from '@caldwell619/mui-inline-suggest'\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        height: '100vh',\n        width: '100vw',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      }}\n    >\n      <InlineSuggest textFieldProps={{ label: 'Test!', variant: 'outlined' }} suggestions={['hYEY!']} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}